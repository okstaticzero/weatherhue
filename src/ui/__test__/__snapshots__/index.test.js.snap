// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should rener the CurrentWeather component 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="current-form"
>
    <h4
        className="current-title"
    >
        View current weather
    </h4>
    <form
        className="form-inline"
        onSubmit={[Function]}
    >
        <div
            className="form-group"
        >
            <input
                className="form-control"
                onChange={[Function]}
                placeholder="Enter Address or zip"
                type="text"
                value=""
            />
            <button
                className="btn btn-default"
            >
                GO
            </button>
        </div>
    </form>
</div>,
  "nodes": Array [
    <div
      className="current-form"
>
      <h4
            className="current-title"
      >
            View current weather
      </h4>
      <form
            className="form-inline"
            onSubmit={[Function]}
      >
            <div
                  className="form-group"
            >
                  <input
                        className="form-control"
                        onChange={[Function]}
                        placeholder="Enter Address or zip"
                        type="text"
                        value=""
                  />
                  <button
                        className="btn btn-default"
                  >
                        GO
                  </button>
            </div>
      </form>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <CurrentWeather />,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": CurrentWeather {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "handleChange": [Function],
        "onSubmit": [Function],
        "props": Object {},
        "refs": Object {},
        "state": Object {
          "input": "",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="current-form"
>
          <h4
                    className="current-title"
          >
                    View current weather
          </h4>
          <form
                    className="form-inline"
                    onSubmit={[Function]}
          >
                    <div
                              className="form-group"
                    >
                              <input
                                        className="form-control"
                                        onChange={[Function]}
                                        placeholder="Enter Address or zip"
                                        type="text"
                                        value=""
                              />
                              <button
                                        className="btn btn-default"
                              >
                                        GO
                              </button>
                    </div>
          </form>
</div>,
        "_debugID": 4,
        "_renderedOutput": <div
          className="current-form"
>
          <h4
                    className="current-title"
          >
                    View current weather
          </h4>
          <form
                    className="form-inline"
                    onSubmit={[Function]}
          >
                    <div
                              className="form-group"
                    >
                              <input
                                        className="form-control"
                                        onChange={[Function]}
                                        placeholder="Enter Address or zip"
                                        type="text"
                                        value=""
                              />
                              <button
                                        className="btn btn-default"
                              >
                                        GO
                              </button>
                    </div>
          </form>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <CurrentWeather />,
}
`;

exports[`should rener the UI component 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="ui-container"
>
    <img
        alt="Logo"
        className="logo"
        src="logo.png"
    />
    <CurrentWeather
        getCurrentWeather={undefined}
    />
    <PastWeather
        setRangeInterval={undefined}
        showAlert={undefined}
    />
</div>,
  "nodes": Array [
    <div
      className="ui-container"
>
      <img
            alt="Logo"
            className="logo"
            src="logo.png"
      />
      <CurrentWeather
            getCurrentWeather={undefined}
      />
      <PastWeather
            setRangeInterval={undefined}
            showAlert={undefined}
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <UI />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": UI {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": Object {
          "input": "",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="ui-container"
>
          <img
                    alt="Logo"
                    className="logo"
                    src="logo.png"
          />
          <CurrentWeather
                    getCurrentWeather={undefined}
          />
          <PastWeather
                    setRangeInterval={undefined}
                    showAlert={undefined}
          />
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="ui-container"
>
          <img
                    alt="Logo"
                    className="logo"
                    src="logo.png"
          />
          <CurrentWeather
                    getCurrentWeather={undefined}
          />
          <PastWeather
                    setRangeInterval={undefined}
                    showAlert={undefined}
          />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <UI />,
}
`;
